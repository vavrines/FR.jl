using PyCall

py"""
import numpy
def get_phifj_solution_grad_tri(order, P1, Np, Nflux, elem_nfaces, V, Vf):

    correction_coeffs = numpy.zeros( shape=(Np, elem_nfaces*P1) )

    phifj_solution_r = numpy.zeros( shape=(Np, Nflux) )
    phifj_solution_s = numpy.zeros( shape=(Np, Nflux) )

    tmp = 1./numpy.sqrt(2)

    nhat = numpy.zeros(shape=(Nflux,2))
    nhat[0:P1, 0] =  0.0
    nhat[0:P1, 1] = -1.0

    nhat[P1:2*P1, :] = tmp

    nhat[2*P1:, 0] = -1
    nhat[2*P1:, 1] = 0.0

    #wgauss, rgauss = get_gauss_nodes(order)
    rgauss, wgauss = numpy.polynomial.legendre.leggauss(order+1)

    for m in range(Np):
        for face in range(3):
            modal_basis_along_face = Vf[ face*P1:(face+1)*P1, m ]
            correction_coeffs[m, face*P1:(face+1)*P1] = modal_basis_along_face*wgauss

    # correct the coefficients for face 2 with the Hypotenuse length
    correction_coeffs[:, P1:2*P1] *= numpy.sqrt(2)

    # Multiply the correction coefficients with the Dubiner basis
    # functions evaluated at the solution and flux points to get the
    # correction functions
    phifj_solution = V.dot(correction_coeffs)

    # multiply each row of the correction function with the
    # transformed element normals. These matrices will be used to
    # compute the gradients and flux divergence
    for m in range(Np):
        phifj_solution_r[m, :] = phifj_solution[m, :] * nhat[:, 0]
        phifj_solution_s[m, :] = phifj_solution[m, :] * nhat[:, 1]

    # stack the matrices
    phifj_grad = numpy.zeros( shape=(3*Np, Nflux) )
    phifj_grad[:Np,     :] = phifj_solution_r[:, :]
    phifj_grad[Np:2*Np, :] = phifj_solution_s[:, :]

    return correction_coeffs, phifj_solution, phifj_grad
"""

"""
r
[-0.81684757,  0.63369515, -0.81684757, -0.10810302, -0.78379396, -0.10810302]

s
[0.63369515, -0.81684757, -0.81684757, -0.78379396, -0.10810302, -0.10810302]

rf
[-0.77459667, 0., 0.77459667, 0.77459667, 0., -0.77459667, -1., -1., -1.]

sf
[-1., -1., -1., -0.77459667, 0., 0.77459667, 0.77459667, 0., -0.77459667]

V
[[ 0.70710678,  1.45054272,  1.39329302,  0.        ,  0.        ,
    -0.04593312],
[ 0.70710678, -0.72527136,  0.43019448,  1.25620684, -0.83406781,
    1.03084378],
[ 0.70710678, -0.72527136,  0.43019448, -1.25620684,  0.83406781,
    1.03084378],
[ 0.70710678, -0.67569095,  0.30868284,  0.        , -0.        ,
    -1.08925616],
[ 0.70710678,  0.33784547, -0.70898933, -0.58516552, -0.88132995,
    0.04853591],
[ 0.70710678,  0.33784547, -0.70898933,  0.58516552,  0.88132995,
    0.04853591]]

correction_coeffs 
[[ 0.3928371   0.62853936  0.3928371   0.55555556  0.88888889  0.55555556
  0.3928371   0.62853936  0.3928371 ]
[-0.55555556 -0.88888889 -0.55555556 -0.52003383  0.62853936  1.30570803
  0.923275    0.44444444 -0.36771945]
[ 0.68041382  1.08866211  0.68041382  0.21689446 -0.76980036  1.70760644
  1.20746009 -0.54433105  0.15336754]
[-0.74535599  0.          0.74535599  1.20746009  1.08866211  0.15336754
 -0.10844723 -0.76980036 -0.85380322]
[ 0.91287093 -0.         -0.91287093 -0.64549722  2.          0.64549722
 -0.45643546 -1.41421356  0.45643546]
[ 0.60858062 -1.21716124  0.60858062  1.6939963   0.86066297  0.02732963
  0.01932497  0.60858062  1.19783627]]

phifj_solution 
[[ 0.39198253  0.72780648  0.39198253 -0.13710719  0.42817214  4.66476318
  3.29848568  0.30276343 -0.09694943]
[-0.09694943  0.30276343  3.29848568  4.66476318  0.42817214 -0.13710719
  0.39198253  0.72780648  0.39198253]
[ 3.29848568  0.30276343 -0.09694943  0.55434701  1.02927379  0.55434701
 -0.09694943  0.30276343  3.29848568]
[ 0.20029351  2.7069103   0.20029351 -1.03402506 -0.97126559  0.00792184
  0.00560158 -0.68678848 -0.73116613]
[-0.73116613 -0.68678848  0.00560158  0.00792184 -0.97126559 -1.03402506
  0.20029351  2.7069103   0.20029351]
[ 0.00560158 -0.68678848 -0.73116613  0.2832578   3.82814926  0.2832578
 -0.73116613 -0.68678848  0.00560158]]

"""

phifj_ref =
[ 0.39198253  0.72780648  0.39198253 -0.13710719  0.42817214  4.66476318 3.29848568  0.30276343 -0.09694943;
-0.09694943  0.30276343  3.29848568  4.66476318  0.42817214 -0.13710719 0.39198253  0.72780648  0.39198253;
 3.29848568  0.30276343 -0.09694943  0.55434701  1.02927379  0.55434701 -0.09694943  0.30276343  3.29848568;
 0.20029351  2.7069103   0.20029351 -1.03402506 -0.97126559  0.00792184 0.00560158 -0.68678848 -0.73116613;
-0.73116613 -0.68678848  0.00560158  0.00792184 -0.97126559 -1.03402506 0.20029351  2.7069103   0.20029351;
 0.00560158 -0.68678848 -0.73116613  0.2832578   3.82814926  0.2832578 -0.73116613 -0.68678848  0.00560158]

py_Vf = [ 0.70710678  -1.          1.22474487  -1.34164079  1.64316767 1.09544512;
       0.70710678  -1.          1.22474487  0.         -0.        -1.36930639;
0.70710678 -1.          1.22474487  1.34164079 -1.64316767 1.09544512;
0.70710678 -0.661895    0.27606157  1.5368458  -0.82158384 2.15610529;
0.70710678  0.5        -0.61237244  0.8660254   1.59099026 0.6846532 ;
0.70710678  1.661895    2.17342817  0.19520501  0.82158384 0.03478494;
0.70710678  1.661895    2.17342817 -0.19520501 -0.82158384 0.03478494;
0.70710678  0.5        -0.61237244 -0.8660254  -1.59099026 0.6846532 ;
0.70710678 -0.661895    0.27606157 -1.5368458   0.82158384 2.15610529]

py_V = 
[ 0.70710678  1.45054272  1.39329302  0.          0.        -0.04593312;
 0.70710678 -0.72527136  0.43019448  1.25620684 -0.83406781 1.03084378;
 0.70710678 -0.72527136  0.43019448 -1.25620684  0.83406781 1.03084378;
 0.70710678 -0.67569095  0.30868284  0.         -0.         -1.08925616;
 0.70710678  0.33784547 -0.70898933 -0.58516552 -0.88132995 0.04853591;
 0.70710678  0.33784547 -0.70898933  0.58516552  0.88132995 0.04853591]

py_sigma, py_fi, py_figrad = py"get_phifj_solution_grad_tri"(N, N+1, 6, 3*(N+1), N+1, py_V, py_Vf)

py_fi - phifj_ref |> maximum


phi_tr = zero(phifj_solution)
for i in 1:3 
	for j in 1:3
		phi_tr[1, (i-1)*3 + j] = ϕ[i, j, 1]
		phi_tr[2, (i-1)*3 + j] = ϕ[i, j, 3]
		phi_tr[3, (i-1)*3 + j] = ϕ[i, j, 5]
		phi_tr[4, (i-1)*3 + j] = ϕ[i, j, 2]
		phi_tr[5, (i-1)*3 + j] = ϕ[i, j, 4]
		phi_tr[6, (i-1)*3 + j] = ϕ[i, j, 6]
	end
end

res = phi_tr .- phifj_solution


res[5, 5]










# in-house data
Vfp = zeros(9, 6)
for i in 1:3, j in 1:3
    Vfp[(i-1)*3 + j, :] .= ψf[i, j, :]
end

σ = zeros(3, N+1, Np)
for k = 1:Np
    for j = 1:N+1
        for i = 1:3
            σ[i, j, k] = wf[i, j] * ψf[i, j, k]
        end
    end
end

id = 1
[σ[1, :, id]; σ[2, :, id]; σ[3, :, id]]