using FluxRC, Test

# Kou's benchmark results
"""
r
[-0.81684757,  0.63369515, -0.81684757, -0.10810302, -0.78379396, -0.10810302]

s
[0.63369515, -0.81684757, -0.81684757, -0.78379396, -0.10810302, -0.10810302]

rf
[-0.77459667, 0., 0.77459667, 0.77459667, 0., -0.77459667, -1., -1., -1.]

sf
[-1., -1., -1., -0.77459667, 0., 0.77459667, 0.77459667, 0., -0.77459667]

V
[[ 0.70710678,  1.45054272,  1.39329302,  0.        ,  0.        ,
    -0.04593312],
[ 0.70710678, -0.72527136,  0.43019448,  1.25620684, -0.83406781,
    1.03084378],
[ 0.70710678, -0.72527136,  0.43019448, -1.25620684,  0.83406781,
    1.03084378],
[ 0.70710678, -0.67569095,  0.30868284,  0.        , -0.        ,
    -1.08925616],
[ 0.70710678,  0.33784547, -0.70898933, -0.58516552, -0.88132995,
    0.04853591],
[ 0.70710678,  0.33784547, -0.70898933,  0.58516552,  0.88132995,
    0.04853591]]

correction_coeffs 
[[ 0.3928371   0.62853936  0.3928371   0.55555556  0.88888889  0.55555556
  0.3928371   0.62853936  0.3928371 ]
[-0.55555556 -0.88888889 -0.55555556 -0.52003383  0.62853936  1.30570803
  0.923275    0.44444444 -0.36771945]
[ 0.68041382  1.08866211  0.68041382  0.21689446 -0.76980036  1.70760644
  1.20746009 -0.54433105  0.15336754]
[-0.74535599  0.          0.74535599  1.20746009  1.08866211  0.15336754
 -0.10844723 -0.76980036 -0.85380322]
[ 0.91287093 -0.         -0.91287093 -0.64549722  2.          0.64549722
 -0.45643546 -1.41421356  0.45643546]
[ 0.60858062 -1.21716124  0.60858062  1.6939963   0.86066297  0.02732963
  0.01932497  0.60858062  1.19783627]]

phifj_solution 
[[ 0.39198253  0.72780648  0.39198253 -0.13710719  0.42817214  4.66476318
  3.29848568  0.30276343 -0.09694943]
[-0.09694943  0.30276343  3.29848568  4.66476318  0.42817214 -0.13710719
  0.39198253  0.72780648  0.39198253]
[ 3.29848568  0.30276343 -0.09694943  0.55434701  1.02927379  0.55434701
 -0.09694943  0.30276343  3.29848568]
[ 0.20029351  2.7069103   0.20029351 -1.03402506 -0.97126559  0.00792184
  0.00560158 -0.68678848 -0.73116613]
[-0.73116613 -0.68678848  0.00560158  0.00792184 -0.97126559 -1.03402506
  0.20029351  2.7069103   0.20029351]
[ 0.00560158 -0.68678848 -0.73116613  0.2832578   3.82814926  0.2832578
 -0.73116613 -0.68678848  0.00560158]]
"""

py_V = [
    0.70710678 1.45054272 1.39329302 0.0 0.0 -0.04593312
    0.70710678 -0.72527136 0.43019448 1.25620684 -0.83406781 1.03084378
    0.70710678 -0.72527136 0.43019448 -1.25620684 0.83406781 1.03084378
    0.70710678 -0.67569095 0.30868284 0.0 -0.0 -1.08925616
    0.70710678 0.33784547 -0.70898933 -0.58516552 -0.88132995 0.04853591
    0.70710678 0.33784547 -0.70898933 0.58516552 0.88132995 0.04853591
]

py_Vf = [
    0.70710678 -1.0 1.22474487 -1.34164079 1.64316767 1.09544512
    0.70710678 -1.0 1.22474487 0.0 -0.0 -1.36930639
    0.70710678 -1.0 1.22474487 1.34164079 -1.64316767 1.09544512
    0.70710678 -0.661895 0.27606157 1.5368458 -0.82158384 2.15610529
    0.70710678 0.5 -0.61237244 0.8660254 1.59099026 0.6846532
    0.70710678 1.661895 2.17342817 0.19520501 0.82158384 0.03478494
    0.70710678 1.661895 2.17342817 -0.19520501 -0.82158384 0.03478494
    0.70710678 0.5 -0.61237244 -0.8660254 -1.59099026 0.6846532
    0.70710678 -0.661895 0.27606157 -1.5368458 0.82158384 2.15610529
]

phifj_ref = [
    0.39198253 0.72780648 0.39198253 -0.13710719 0.42817214 4.66476318 3.29848568 0.30276343 -0.09694943
    -0.09694943 0.30276343 3.29848568 4.66476318 0.42817214 -0.13710719 0.39198253 0.72780648 0.39198253
    3.29848568 0.30276343 -0.09694943 0.55434701 1.02927379 0.55434701 -0.09694943 0.30276343 3.29848568
    0.20029351 2.7069103 0.20029351 -1.03402506 -0.97126559 0.00792184 0.00560158 -0.68678848 -0.73116613
    -0.73116613 -0.68678848 0.00560158 0.00792184 -0.97126559 -1.03402506 0.20029351 2.7069103 0.20029351
    0.00560158 -0.68678848 -0.73116613 0.2832578 3.82814926 0.2832578 -0.73116613 -0.68678848 0.00560158
]

# my workflow
N = deg = 2
Np = (N + 1) * (N + 2) ÷ 2

pl, wl = tri_quadrature(N)

V = vandermonde_matrix(N, pl[:, 1], pl[:, 2])
Vr, Vs = ∂vandermonde_matrix(N, pl[:, 1], pl[:, 2])
∂l = ∂lagrange(V, Vr, Vs)

ϕ = correction_field(N, V)

pf, wf = triface_quadrature(N)
ψf = zeros(3, N + 1, Np)
for i in 1:3
    ψf[i, :, :] .= vandermonde_matrix(N, pf[i, :, 1], pf[i, :, 2])
end

# Vandermonde -> solution points
V1 = hcat(V[1, :], V[3, :], V[5, :], V[2, :], V[4, :], V[6, :]) |> permutedims
@test V1 ≈ py_V

# Vandermonde -> flux points
Vf = zeros(9, 6)
for i in 1:3, j in 1:3
    Vf[(i-1)*3+j, :] .= ψf[i, j, :]
end
@test Vf ≈ py_Vf

# coefficients
ϕ1 = zeros(6, 9)
for i in 1:3, j in 1:3
    ϕ1[:, (i-1)*3+j] .= ϕ[i, j, :]
end
ϕ2 = hcat(ϕ1[1, :], ϕ1[3, :], ϕ1[5, :], ϕ1[2, :], ϕ1[4, :], ϕ1[6, :]) |> permutedims
@test ϕ2 ≈ phifj_ref

# reproduce from python script
cd(@__DIR__)
include("python_phi.jl")

py_sigma, py_fi, py_figrad =
    py"get_phifj_solution_grad_tri"(N, N + 1, 6, 3 * (N + 1), N + 1, py_V, py_Vf)
@test ϕ2 ≈ py_fi
